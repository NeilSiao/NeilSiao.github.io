<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Install phpunit</title>
    <link href="/2021/05/24/installPhpUnit/"/>
    <url>/2021/05/24/installPhpUnit/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="Install-PHPUnit"><a href="#Install-PHPUnit" class="headerlink" title="Install PHPUnit"></a>Install PHPUnit</h2><p>前置安裝:<br>    - Composer (PHP套件管理工具)<br>    - PHP</p><p>[(PHPUnit) [<a href="https://phpunit.de/]]%EF%BC%8CPHP%E7%9A%84%E6%B8%AC%E8%A9%A6%E5%A5%97%E4%BB%B6%EF%BC%8C%E7%94%A8%E4%BE%86%E6%92%B0%E5%AF%AB%E7%A8%8B%E5%BC%8F%E6%B8%AC%E8%A9%A6%E7%94%A8%E3%80%82%E6%A0%B9%E6%93%9A%E5%AE%98%E7%B6%B2%E7%9A%84%E4%BB%8B%E7%B4%B9%EF%BC%8C%E5%AE%89%E8%A3%9D%E6%AD%A5%E9%A9%9F%E5%A6%82%E4%B8%8B">https://phpunit.de/]]，PHP的測試套件，用來撰寫程式測試用。根據官網的介紹，安裝步驟如下</a>:</p><pre><code>-  composer require --dev phpunit ^9-  ./vendor/bin/phpunit --version  ## Windows 需要改寫 &quot;./vendor/bin/phpunit&quot; --version<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 調整 composer.json 後，執行 composer dump 產生 autoload.php</span><br>&#123;<br>    <span class="hljs-attr">&quot;autoload&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;psr-4&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;App\\&quot;</span>:<span class="hljs-string">&quot;src&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;require-dev&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;phpunit/phpunit&quot;</span>: <span class="hljs-string">&quot;9&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h2 id="PHPUnit官網上的範例程式碼"><a href="#PHPUnit官網上的範例程式碼" class="headerlink" title="PHPUnit官網上的範例程式碼"></a>PHPUnit官網上的範例程式碼</h2><pre><code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// test/EmailTest.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Email</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PHPUnit</span>\<span class="hljs-title">Framework</span>\<span class="hljs-title">TestCase</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmailTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testCanBeCreatedFromValidEmailAddress</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;assertInstanceOf(<br>            Email::class,<br>            Email::fromString(<span class="hljs-string">&#x27;user@example.com&#x27;</span>)<br>        );<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testCannotBeCreatedFromInvalidEmailAddress</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;expectException(<span class="hljs-built_in">InvalidArgumentException</span>::class);<br><br>        Email::fromString(<span class="hljs-string">&#x27;invalid&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testCanBeUsedAsString</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;assertEquals(<br>            <span class="hljs-string">&#x27;user@example.com&#x27;</span>,<br>            Email::fromString(<span class="hljs-string">&#x27;user@example.com&#x27;</span>)<br>        );<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//src/Email.php</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">declare</span> (strict_types = <span class="hljs-number">1</span>);<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Email</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">private</span> $email;<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> $email</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;ensureIsValidEmail($email);<br><br>        <span class="hljs-keyword">$this</span>-&gt;email = $email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fromString</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> $email</span>): <span class="hljs-title">self</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>($email);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;email;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ensureIsValidEmail</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> $email</span>): <span class="hljs-title">void</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!filter_var($email, FILTER_VALIDATE_EMAIL)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-built_in">InvalidArgumentException</span>(<br>                sprintf(<br>                    <span class="hljs-string">&#x27;&quot;%s&quot; is not a valid email address&#x27;</span>,<br>                    $email<br>                )<br>            );<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h2 id="Running-PHPUnit"><a href="#Running-PHPUnit" class="headerlink" title="Running PHPUnit"></a>Running PHPUnit</h2><pre><code>![PHPUnit 執行畫面](/img/phpunitCmd.jpg)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>-php phpunit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Avoid AWS GCP Azure Cost Disasters</title>
    <link href="/2021/03/15/CloudOverFlow/"/>
    <url>/2021/03/15/CloudOverFlow/</url>
    
    <content type="html"><![CDATA[<h1 id="雲端服務可能意外造成非預期的費用"><a href="#雲端服務可能意外造成非預期的費用" class="headerlink" title="雲端服務可能意外造成非預期的費用"></a>雲端服務可能意外造成非預期的費用</h1><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>程式碼的效率，如果頁面上有類似於統計或複雜運算的資料，例如募資網站，當前的募資金額，如果每一個新的使用者進入該頁面，都會重新計算，當該筆金額是由數百萬人所捐款的總額，其雲端的運算量將會非常的驚人，也因此造成雲端成本暴漲。</p><h2 id="Secure-Cloud-Key"><a href="#Secure-Cloud-Key" class="headerlink" title="Secure Cloud Key"></a>Secure Cloud Key</h2><p>不要把 AWS key 放到雲端，否則很可能會被偷走，拿去跑複雜的運算…</p><h2 id="You-don’t-need-to-scale-yet"><a href="#You-don’t-need-to-scale-yet" class="headerlink" title="You don’t need to scale yet"></a>You don’t need to scale yet</h2><p>雲端服務都有預設 auto scale ，當設定此選項時，須注意預設的數量是否過大，導致寫出錯誤程式碼時，瘋狂的加開 instance 導致費用暴漲</p><h2 id="dont’-create-infinite-loops"><a href="#dont’-create-infinite-loops" class="headerlink" title="dont’ create infinite loops"></a>dont’ create infinite loops</h2><p>避免在雲端上，寫出具有無窮迴圈的程式碼，例如: 上傳檔案觸發 Cloud function，Cloud function 又觸發上傳檔案，無窮迴圈，費用飆漲。</p><h2 id="Set-up-budget-alert"><a href="#Set-up-budget-alert" class="headerlink" title="Set up budget alert"></a>Set up budget alert</h2><p>在帳戶設定預算上限，AWS 宣布可以開始設定預算上限，當超過預算，可以自動關閉。GCP 則是需要自己在撰寫程式偵測當收到預算超過的 Email 時，自動關閉服務。</p><h2 id="實際案例-Announce-today"><a href="#實際案例-Announce-today" class="headerlink" title="實際案例: Announce today"></a>實際案例: Announce today</h2><p>新創軟體 Announce today 因為程式碼問題，GCP 的 Cloud Run 以每分鐘五百美金的價錢持續飆漲，短短幾個小時內費用來到 $72,000 美金。最後通報 Google 這是場意外後，Google 取消了這筆費用。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>雲端服務，雖然讓我們省去許多機器投入成本和維護的麻煩，但是也帶來許多需要特別注意的地方，畢竟雲端服務的收費方式非常多元，網路流量、以次數計算、自動擴充等，如果有環節沒顧慮到，就有可能發生超出預算的情況。</p><p>雖然意外總會發生，GCP、AWS 的態度也傾向保護客戶的角度，只要不是故意，就不會特意去收取此項費用，但是客戶還是需要謹慎的使用，避免造成不必要的麻煩。</p><p><a href="https://www.youtube.com/watch?v=N6lYcXjd4pg">How to Burn Money in the Cloud //Avoid AWS, GCP, Azure Cost Disasters</a><br><a href="https://www.reddit.com/r/googlecloud/comments/kaa5ew/we_burnt_72k_testing_firebase_cloud_run_and/">Reddit $72,000 美元的參考連結</a><br><a href="https://www.youtube.com/watch?v=Lb-Pnytoi-8">how to not get a 30k firebase bill</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>-cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 xampp 架設 Laravel 和 SSL、Let&#39;s encrypted</title>
    <link href="/2021/03/15/xampServerAndLaravel/"/>
    <url>/2021/03/15/xampServerAndLaravel/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="xampp-安裝教學"><a href="#xampp-安裝教學" class="headerlink" title="xampp 安裝教學"></a>xampp 安裝教學</h1><p>xampp 安裝教學的部分參考 <a href="https://walker-a.com/archives/6255">挨踢路人甲</a></p><h1 id="Laravel-安裝"><a href="#Laravel-安裝" class="headerlink" title="Laravel 安裝"></a>Laravel 安裝</h1><p>選擇專案資料夾</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console">//安裝<br>composer create-project laravel/laravel chatbot<br>//產生金鑰<br>php artisan key:generate<br></code></pre></td></tr></table></figure><h1 id="DNS-申請"><a href="#DNS-申請" class="headerlink" title="DNS 申請"></a>DNS 申請</h1><p>使用免費的 DNS 服務 <a href="https://www.freenom.com/zu/index.html?lang=zu">Freenom</a>， 參考<a href="https://www.kocpc.com.tw/archives/180195">電腦王阿達 - 架站的前哨站，免費的 freenom 網域申請</a></p><p>主要就是輸入自己喜歡的 domainName 註冊完畢，然後設定 A (IPv4) 紀錄，指向哪一個 IP，再讓子彈飛一會，DNS 擴散完畢，就可以對應到你的主機了。</p><blockquote><p><a href="https://appuals.com/how-to-fix-server-dns-address-could-not-be-found-error-on-google-chrome/">網站可以檢查 DNS 散播情況</a></p></blockquote><blockquote><p>AAAA 是指 IPv6</p></blockquote><blockquote><p>CNAME 表示 domainName 的其他別名, 例如 <a href="http://www.neilsiao.tk/">www.neilsiao.tk</a> 指向 neilsiao.tk</p></blockquote><h1 id="Let’s-encrypted-申請"><a href="#Let’s-encrypted-申請" class="headerlink" title="Let’s encrypted 申請"></a>Let’s encrypted 申請</h1><p>由於環境不是 Unix like 的環境，所以使用 sslforfree.com 取得憑證，下載後有三個檔案 ca_bundle.crt、certificate.crt、private.key，將檔案放置到 apache/conf/ssl 相關位置，修改 httpd-vhosts.conf 設定如下，接著為了驗證網站所有者是妳本人，到 Laravel 專案的 public 資料夾建立 /well-known/pki-validation/{sslforfree 的 txt 檔案}，搭配 sslforfree 驗證按鈕，就會去驗證你確實是網站的主人，完成 SSL 設定。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console">SSLEngine on<br>SSLCertificateFile &quot;D:/xampp/apache/conf/ssl.crt/certificate.crt&quot;<br>SSLCertificateKeyFile &quot;D:/xampp/apache/conf/ssl.key/private.key&quot;<br>SSLCertificateChainFile &quot;D:/xampp/apache/conf/ssl.crt/ca_bundle.crt&quot;<br></code></pre></td></tr></table></figure><blockquote><p>sslforfree.com 本身也是使用 let’s encrypted 的服務，</p></blockquote><p>參考教學 <a href="https://medium.com/@45EMC521/xampp-%E4%BD%BF%E7%94%A8-lets-encrypt-ssl-%E9%96%8B%E5%95%9F%E5%8A%A0%E5%AF%86%E9%80%A3%E7%B7%9A-%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-c05b5f97195a">XAMPP 使用 Let’s Encrypt SSL 開啟加密連線—完整教學</a></p><h1 id="Apache-設定檔"><a href="#Apache-設定檔" class="headerlink" title="Apache 設定檔"></a>Apache 設定檔</h1><p>參考教學 <a href="https://medium.com/%E6%B5%A6%E5%B3%B6%E5%A4%AA%E9%83%8E%E7%9A%84%E6%B0%B4%E6%97%8F%E7%BC%B8/laravel-5-4-on-apache-%E5%9C%A8-apache-%E6%9E%B6-laravel-%E7%B6%B2%E7%AB%99-9b7d1ad938af">Laravel 5.4 On Apache：在 Apache 架 Laravel 網站</a></p><p>透過 xampp 的控制面板，可以找到 Apache config 按鈕，可以找到相關路徑，主要的設定檔有 httpd.conf、httpd-vhosts</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs console">// httpd.conf 確保有 Include vhost<br><span class="hljs-meta">#</span><span class="bash"> Virtual hosts</span><br>Include conf/extra/httpd-vhosts.conf<br><br>// httpd-vhosts.conf<br>&lt;VirtualHost *:80&gt;<br>    #ServerAdmin webmaster@dummy-host.example.com<br>    ServerName neilsiao.tk<br>    ServerAlias www.neilsiao.tk<br>    # 80 port 的流量導到 443 https<br>    Redirect 301 / https://neilsiao.tk<br>&lt;/VirtualHost&gt;<br><br>&lt;VirtualHost *:443&gt;<br>    #ServerAdmin webmaster@dummy-host.example.com<br>    DocumentRoot &quot;D:/Interview/chatbot/public&quot;<br>    ServerName neilsiao.tk<br>    ServerAlias www.neilsiao.tk<br>    ErrorLog &quot;logs/dummy-host.example.com-error.log&quot;<br>    CustomLog &quot;logs/dummy-host.example.com-access.log&quot; common<br><br>    #Laravel 專案位置<br>&lt;Directory D:/Interview/chatbot/public&gt;<br>AllowOverride all<br>Require all granted # 不限制 IP 連入網站<br>&lt;/Directory&gt;<br><br>    # SSL 設定<br>SSLEngine on<br>SSLCertificateFile &quot;D:/xampp/apache/conf/ssl.crt/certificate.crt&quot;<br>SSLCertificateKeyFile &quot;D:/xampp/apache/conf/ssl.key/private.key&quot;<br>SSLCertificateChainFile &quot;D:/xampp/apache/conf/ssl.crt/ca_bundle.crt&quot;<br>&lt;/VirtualHost&gt;<br><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://dotblogs.com.tw/maplenote/2012/07/20/apache24_httpd_conf">Apache 從 2.2 換至 2.4 httpd.conf 的調整筆記 (windows 環境)</a></p></blockquote><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ol><li>xampp 安裝 Apache, MariaDB, PHP</li><li>Freenom 購買 Domain, 設定 A、CNAME 參照 IP 與 www 的名稱</li><li>安裝 Laravel 專案，php artisan key:generate</li><li>申請 SSL 憑證，至 xampp 的 httpd-vhosts 設定憑證的三個檔案，在 Laravel public 新增 /well-known/pki-validation/{sslforfree.txt}檔案</li><li>訪問 domain name ， OK</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>-learning xampp laravel ssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 陣列操作</title>
    <link href="/2021/01/26/javaScriptArrayManipulate/"/>
    <url>/2021/01/26/javaScriptArrayManipulate/</url>
    
    <content type="html"><![CDATA[<h2 id="Javascript-Array-筆記"><a href="#Javascript-Array-筆記" class="headerlink" title="Javascript Array 筆記"></a>Javascript Array 筆記</h2><p>紀律常常會使用到的陣列操作，方便開發。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [];<br><span class="hljs-keyword">var</span> arrayObject = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><span class="hljs-comment">//判斷空陣列</span><br>array == <span class="hljs-number">0</span>; <span class="hljs-comment">//true</span><br>arrayObject == <span class="hljs-number">0</span>; <span class="hljs-comment">//true</span><br><br>array === <span class="hljs-number">0</span>; <span class="hljs-comment">//false</span><br>arrayObject === <span class="hljs-number">0</span>; <span class="hljs-comment">//false</span><br><br>array.length == <span class="hljs-number">0</span>; <span class="hljs-comment">//true</span><br>arrayObject.length == <span class="hljs-number">0</span>; <span class="hljs-comment">//true</span><br><br>array.length === <span class="hljs-number">0</span>; <span class="hljs-comment">//true</span><br>arrayObject.length === <span class="hljs-number">0</span>; <span class="hljs-comment">//true</span><br><br><span class="hljs-comment">// array 常見的操作有哪些</span><br><span class="hljs-comment">//基本款</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; array.length &gt; i; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(array[i]);<br>&#125;<br><br><span class="hljs-comment">//進階款, 陣列本身提供的 function</span><br><span class="hljs-comment">// 1. foreach</span><br><span class="hljs-keyword">var</span> result = array.forEach(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//效果跟上面的基本款相同, 針對資料進行遍歷操作</span><br>&#125;);<br><span class="hljs-comment">// 沒有回傳值</span><br><span class="hljs-comment">// result = undefined</span><br><br><span class="hljs-comment">// 2. map((item, index, array) =&gt; &#123;&#125;)</span><br><span class="hljs-keyword">var</span> result = array.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, array</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item;<br>&#125;);<br><span class="hljs-comment">// 回傳值為操作後的陣列</span><br><span class="hljs-comment">// result = array</span><br><br><span class="hljs-comment">// 3. filter((item, index))</span><br><span class="hljs-keyword">var</span> result = array.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (condition) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;);<br><span class="hljs-comment">// result = 條件過濾後的Array. 可以去除不要的原數</span><br><br><span class="hljs-comment">// 4.every((item, i))</span><br><span class="hljs-comment">// 檢查每個元素的結果為何,除非全部都符合才回傳 True</span><br><span class="hljs-keyword">var</span> result = array.every(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, i</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> condition; <span class="hljs-comment">// true || false</span><br>&#125;);<br><span class="hljs-comment">//result = true || false;</span><br><br><span class="hljs-comment">// 5. some((item, i))</span><br><span class="hljs-comment">// 只要某一個條件成功, 即回傳 true</span><br><span class="hljs-keyword">var</span> result = array.some(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, i</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> condition; <span class="hljs-comment">// true || false</span><br>&#125;);<br><br><span class="hljs-comment">// 6.reduce((previous, item, index)=&gt;&#123;&#125;, initial);</span><br><span class="hljs-comment">//比大小</span><br><span class="hljs-keyword">var</span> result = array.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">pre, item, index</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(prev, item.Number);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// result = 陣列最大值</span><br><br><span class="hljs-comment">// 7.indexOf(key)</span><br><span class="hljs-keyword">var</span> index = array.indexOf(<span class="hljs-string">&quot;key&quot;</span>);<br><span class="hljs-comment">// result 會傳傳 index 的位置.</span><br><span class="hljs-comment">// array[index] 抓取值</span><br><br><span class="hljs-comment">// 8.find(function(item, index, array)&#123;&#125;)</span><br><span class="hljs-keyword">var</span> result = array.find(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, array</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> condition; <span class="hljs-comment">// true || false;</span><br>&#125;);<br><span class="hljs-comment">// result = 找到符合條件的第一個 Element</span><br></code></pre></td></tr></table></figure><h2 id="Javascript-PassByValue-PassByRef"><a href="#Javascript-PassByValue-PassByRef" class="headerlink" title="Javascript PassByValue PassByRef"></a>Javascript PassByValue PassByRef</h2><p>除了陣列操作外, Js 的 傳值, 傳址也是非常重要的概念,像 Vue 很多地方參數的宣告都是使用 {} Object 型態,想了解原理就必須學習此概念, 下方文章寫得很清晰,收錄起來放著.<br><a href="https://kuro.tw/posts/2017/12/08/JavaScript-%E6%98%AF%E3%80%8C%E5%82%B3%E5%80%BC%E3%80%8D%E6%88%96%E3%80%8C%E5%82%B3%E5%9D%80%E3%80%8D/">JavaScript 是「傳值」或「傳址」Kuro’s Blog</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArrangeSeatExp</title>
    <link href="/2021/01/25/arrangeSeatExp/"/>
    <url>/2021/01/25/arrangeSeatExp/</url>
    
    <content type="html"><![CDATA[<h2 id="寫一個簡單的排座位系統"><a href="#寫一個簡單的排座位系統" class="headerlink" title="寫一個簡單的排座位系統"></a>寫一個簡單的排座位系統</h2><p>這是一個挺簡單的系統,但是在實作過程中還是會卡在一些地方,算是當作筆記,讓之後自己在撰寫程式時,比較不容易採坑.</p><blockquote><p>使用 Laravel, jQuery, 一點點的 Vue</p></blockquote><h3 id="Jquery-和-Vue-js"><a href="#Jquery-和-Vue-js" class="headerlink" title="Jquery 和 Vue.js"></a>Jquery 和 Vue.js</h3><p>起初想說此系統應該沒有很複雜,可能 Jquery 操作資料+DOM,弄一弄就好了,但是實際在撰寫的過程中,發現挺多問題的,因為要照顧的對象有兩個（Dom,Data）,所以時常遇到資料操作完了,又要回頭思考我要在哪裡綁定 Event 比較好,常常來回跑,且程式檔案變多之後,已經有點看不清楚資料是如何在我的 js 檔案之中流動了…  </p><p>後來將其中一個 Modal 畫面改寫成 Vue.js 搭配 vue dev tool, 此時可以先發現一個好處,我減少大量在 jquery console.log 的處境了!! 這一點很重要,不然在 jQuery 的世界只能不斷的 log 看資料在哪個步驟變成怎樣, Vue.js 偶爾還是需要 log 看看資料的轉移. 但減少很多.</p><p>下一次我個人會推薦嘗試看看資料導向的前端框架, 畢竟減少不少考慮 Dom 和找資料的時間.</p><h3 id="亂數排序座位與學生"><a href="#亂數排序座位與學生" class="headerlink" title="亂數排序座位與學生"></a>亂數排序座位與學生</h3><p>在亂數排序的過程中, 最重要的是亂數的機率,比起 version 1, 其實要使用 version 2 (Fisher-Yates Shuffle), 才能達到更好的隨機效果.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//version 1, </span><br><span class="hljs-comment">//it depends on browser&#x27;s sorting method. </span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sort</span>(<span class="hljs-params">array</span>)</span>&#123;<br>    array.sort(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">Math</span>.random() - <span class="hljs-number">0.5</span>)<br>&#125;<br><br><br><span class="hljs-comment">//version 2</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Fisher-Yates Shuffle</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;array&#125;</span> </span>array </span><br><span class="hljs-comment"> * if u don&#x27;t want to change original array, use array.slice(0)</span><br><span class="hljs-comment"> * to assign new data. var newArray = array.slice(0);</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shuffle</span>(<span class="hljs-params">array</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = array.length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">let</span> j = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (i + <span class="hljs-number">1</span>));<br>        [array[i], array[j]] = [array[j], array[i]];<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定義系統需求"><a href="#定義系統需求" class="headerlink" title="定義系統需求"></a>定義系統需求</h3><p>寫到隨機排序座位功能時,心中一直有一種這樣可以,那樣做更好的想法,結果程式碼改來改去的,浪費不少時間… </p><p>當初在構思時,其實也沒有想太多（座位,學生,亂數隨機）, 確實也是如此, 但是當畫面的呈現與實際撰寫還是有些微的出入, 譬如學生屬於某個班級,那是不是可以直接把整班的學生抓進來亂數隨機, 教室切換班級時,是不是應該保留先前的隨機資料,一些比較細節的地方,都值得考慮是否要作到那麼複雜</p><p>此外還可以繼續延伸下去,例如：加入<code>時段, 課程</code>的條件因素等等, 系統就會更加複雜, 所以明確的系統需求就佔有相當重要的成份, 如果一直做下去,其實沒完沒了…</p><h3 id="成果網站參考"><a href="#成果網站參考" class="headerlink" title="成果網站參考"></a>成果網站參考</h3><p><a href="https://arrange-seat.herokuapp.com/">https://arrange-seat.herokuapp.com/</a><br>測試帳號: <a href="mailto:&#x74;&#101;&#x73;&#x74;&#x40;&#x74;&#x65;&#115;&#x74;&#46;&#99;&#x6f;&#109;">&#x74;&#101;&#x73;&#x74;&#x40;&#x74;&#x65;&#115;&#x74;&#46;&#99;&#x6f;&#109;</a><br>測試密碼: 12345678</p>]]></content>
    
    
    
    <tags>
      
      <tag>-learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 heroku 部屬 Laravel</title>
    <link href="/2021/01/25/pushHerokuLaravel/"/>
    <url>/2021/01/25/pushHerokuLaravel/</url>
    
    <content type="html"><![CDATA[<h2 id="部屬流程"><a href="#部屬流程" class="headerlink" title="部屬流程"></a>部屬流程</h2><p>紀錄部屬 laravel app 到 heroku 上的流程, 雖然部屬過好幾次了, 可是每次都會忘記,因此留下這篇當作紀錄…</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>heroku-cli<br><br><span class="hljs-regexp">//</span>指定Apache2 pubilc directory<br>echo <span class="hljs-string">&quot;web: vendor/bin/heroku-php-apache2 public/&quot;</span> &gt; Procfile<br><br><span class="hljs-regexp">//</span>建制 heroku app, <br>heroku create [appName]<br><br><span class="hljs-regexp">//</span>有使用到 npm 所以需要啟用 heroku 編譯的套組<br>heroku buildpacks:add heroku/nodejs<br><br><span class="hljs-regexp">//</span> 設定 npm 不是 production mode 否則不會安裝 dev-dependencies 的套件<br>heroku config:set NPM_CONFIG_PRODUCTION=false<br><br><span class="hljs-regexp">//</span>重新產生 Laravel APP_KEY<br>heroku config:set APP_KEY=$(php artisan --no-ansi key:generate --show)<br><br><span class="hljs-regexp">//</span>關於 APP_KEY 以前一直有個迷思,如果 APP_KEY 換掉使用者是不是就無法登入了, 其實是不會的. 因為 <br><span class="hljs-regexp">//</span>bcrpt 會把演算的方式也一併加入在 Hash 後的字串當中. Laravel 好像只有用來加密 Session 這一部份...<br><br><span class="hljs-regexp">//</span>推送專案到 heroku 上面<br>git push heroku main <br><br></code></pre></td></tr></table></figure><h2 id="heroku-command"><a href="#heroku-command" class="headerlink" title="heroku command"></a>heroku command</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 設定 heroku 機器的環境變數, 相當於 laravel 的 env 檔案<br>heroku config:set VAR_NAME=VAR_VALUE<br><br><span class="hljs-regexp">//</span> 錯誤查找 <br>heroku logs<br><br><span class="hljs-regexp">//</span> 登入 heroku<br>heroku login <br><br><span class="hljs-regexp">//</span> 列出你有哪些專案<br>heroku apps<br><br><span class="hljs-regexp">//</span> 詳系列出所有指令<br>heroku --help<br></code></pre></td></tr></table></figure><h2 id="heroku-編譯腳本"><a href="#heroku-編譯腳本" class="headerlink" title="heroku 編譯腳本"></a>heroku 編譯腳本</h2><p>由於有需要重新編譯前端資源,所以會在 package.json 新增資料.</p><p> heroku-postbuild 是官方的 pipeline, 名稱正確就會幫你去跑指令了</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;npm run development&quot;</span>,<br>    <span class="hljs-string">&quot;heroku-postbuild&quot;</span>: <span class="hljs-string">&quot;npm run prod&quot;</span><br>    <span class="hljs-string">...</span><br>&#125;,<br></code></pre></td></tr></table></figure><blockquote><p>如果有其他指令也可以透過 heroku run php artisan storage:link 或者是 heroku run npm install</p></blockquote><h2 id="免費的資料庫-heroku-postgre-sql"><a href="#免費的資料庫-heroku-postgre-sql" class="headerlink" title="免費的資料庫 heroku-postgre-sql"></a>免費的資料庫 heroku-postgre-sql</h2><p>Heroku 有提供免費的資料庫系統使用. 只要修改 Laravel config/database.php 的setting 就可以抓取正確的資料了<br>但是！！ 必須先建立 pgsql</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">heroku</span> <span class="hljs-selector-tag">addons</span><span class="hljs-selector-pseudo">:create</span> <span class="hljs-selector-tag">heroku-postgresql</span><span class="hljs-selector-pseudo">:hobby-dev</span><br></code></pre></td></tr></table></figure><p>調整 config/database.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 當你使用heroku addons 之後, 就會自動幫你增加 </span><br><span class="hljs-comment">//DATABASE_URL 變數, 這個變數包含的連線到資料庫的相關參數</span><br><br><span class="hljs-comment">// getenv from heroku</span><br>$DATABASE_URL = parse_url(getenv(<span class="hljs-string">&quot;DATABASE_URL&quot;</span>));<br><br><span class="hljs-string">&#x27;pgsql&#x27;</span> =&gt; [<br>    <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;pgsql&#x27;</span>,<br>    <span class="hljs-string">&#x27;url&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;DATABASE_URL&#x27;</span>),<br>    <span class="hljs-string">&#x27;host&#x27;</span> =&gt; $DATABASE_URL[<span class="hljs-string">&quot;host&quot;</span>],<br>    <span class="hljs-string">&#x27;port&#x27;</span> =&gt; $DATABASE_URL[<span class="hljs-string">&quot;port&quot;</span>],<br>    <span class="hljs-string">&#x27;database&#x27;</span> =&gt; ltrim($DATABASE_URL[<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;/&quot;</span>),<br>    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; $DATABASE_URL[<span class="hljs-string">&quot;user&quot;</span>],<br>    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; $DATABASE_URL[<span class="hljs-string">&quot;pass&quot;</span>],<br>    <span class="hljs-string">&#x27;charset&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>,<br>    <span class="hljs-string">&#x27;prefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-string">&#x27;prefix_indexes&#x27;</span> =&gt; <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&#x27;schema&#x27;</span> =&gt; <span class="hljs-string">&#x27;public&#x27;</span>,<br>    <span class="hljs-string">&#x27;sslmode&#x27;</span> =&gt; <span class="hljs-string">&#x27;prefer&#x27;</span>,<br>],<br></code></pre></td></tr></table></figure><p>由於控制連線的方式是看 env 的 DB_CONNECTION, 所以我們使用 <code>heroku config:set DB_CONNECTION=pgsql</code>, 不喜歡打 command line 其實也可以直接在官網 Dashboard 進行設定</p><p>資料庫設定完畢後,就可以藉由 Laravel Migration Seeder 來進行資料表的開設了.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">heroku <span class="hljs-keyword">run</span><span class="bash"> php artisan storage:link</span><br><br>heroku <span class="hljs-keyword">run</span><span class="bash"> php artisan migrate &amp;&amp; php artisan db:seed</span><br></code></pre></td></tr></table></figure><h2 id="db-seed-Class-‘Faker-Factory’-not-found"><a href="#db-seed-Class-‘Faker-Factory’-not-found" class="headerlink" title="db:seed Class ‘Faker\Factory’ not found"></a>db:seed Class ‘Faker\Factory’ not found</h2><p>執行 php artisan db:seed 時, 如果發現這個錯誤則需要將 faker package 從 composer.json 的 require-dev 移動到 require 上面. 否則不會安裝..<br><a href="https://stackoverflow.com/questions/32801183/deployment-on-laravel-forge-throwing-faker-not-found-exception">參考文章</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">//移動完後使用<br>composer <span class="hljs-keyword">install</span> <br>composer <span class="hljs-keyword">update</span><br>//<span class="hljs-keyword">add</span> composer.lock change..<br>git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">&quot;modify composer.lock&quot;</span><br>git push heroku <span class="hljs-keyword">main</span><br></code></pre></td></tr></table></figure><h2 id="Laravel-asset-http-vs-https"><a href="#Laravel-asset-http-vs-https" class="headerlink" title="Laravel asset http vs https"></a>Laravel asset http vs https</h2><p>如果在 Blade 使用 asset(‘js/index.js’) 在部屬後可能會發現網站全面跑板, 此時就是因為 Heroku 預設是 https 可是資源卻是 http 請求, 瀏覽器的機制會自動讓請求失敗.</p><p>所以可以考慮在 Laravel AppServiceProvider 的 boot method 使用下方程式碼, 強制轉換所有請求為 https.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span>(<span class="hljs-params"></span>)</span>&#123;<br>    \Illuminate\Support\Facades\Url::forceScheme(<span class="hljs-string">&#x27;https&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Heroku-Server-Error"><a href="#Heroku-Server-Error" class="headerlink" title="Heroku Server Error"></a>Heroku Server Error</h2><p>為了知道為什麼本地端沒問題, 一上去 Heroku 就出錯該怎麼辦？<br>可以照官方的作法在 config/logging.php 調整參數, env 預設的 LOG_CHANNLE 是 stack, 只需要使用 <code>heroku config:set LOG_CHANNEL=single</code> 即可. 這樣就可以使用 <code>heroku logs</code> 查看問題了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;channels&#x27;</span> =&gt; [<br>      <span class="hljs-string">&#x27;stack&#x27;</span> =&gt; [<br>          <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;stack&#x27;</span>,<br>          <span class="hljs-string">&#x27;channels&#x27;</span> =&gt; [<span class="hljs-string">&#x27;single&#x27;</span>],<br>          <span class="hljs-string">&#x27;ignore_exceptions&#x27;</span> =&gt; <span class="hljs-literal">false</span>,<br>      ],<br><br>      <span class="hljs-string">&#x27;single&#x27;</span> =&gt; [<br>          <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;errorlog&#x27;</span>, <span class="hljs-comment">//log for heroku</span><br>          <span class="hljs-string">&#x27;path&#x27;</span> =&gt; storage_path(<span class="hljs-string">&#x27;logs/laravel.log&#x27;</span>),<br>          <span class="hljs-string">&#x27;level&#x27;</span> =&gt; <span class="hljs-string">&#x27;debug&#x27;</span>,<br>      ],<br></code></pre></td></tr></table></figure><p>參考來源：</p><ol><li><a href="https://dev.to/eduvin/how-to-deploy-a-laravel-vue-app-to-heroku-4kmg">How to deploy a Laravel/Vue App to Heroku</a></li><li><a href="https://stackoverflow.com/questions/59084954/laravel-vuejs-app-does-not-update-after-deploying-to-heroku">Laravel/Vuejs app does not update after deploying to Heroku</a></li><li><a href="https://andyyou.medium.com/deploy-laravel-7-to-heroku-2020-bf8f420467e0">Deploy Laravel 7 to Heroku 2020</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>-heroku deployment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>snap docker is inactive</title>
    <link href="/2021/01/21/dockerInactive/"/>
    <url>/2021/01/21/dockerInactive/</url>
    
    <content type="html"><![CDATA[<h2 id="snap-start-docker-啟動後還是-inactive-的怪問題"><a href="#snap-start-docker-啟動後還是-inactive-的怪問題" class="headerlink" title="snap start docker 啟動後還是 inactive 的怪問題"></a>snap start docker 啟動後還是 inactive 的怪問題</h2><p>前一陣子,經常只要重新開機後,就會導致 docker 無法正常運行,常常需要照著<a href="https://askubuntu.com/questions/907110/docker-snap-cannot-connect-to-the-docker-daemon-is-the-docker-daemon-running-o">這篇</a>重新安裝. 又要多花 5~10 Mins 的時間.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">sudo snap remove docker --purge<br>sudo snap install docker<br></code></pre></td></tr></table></figure><p>後來找到<a href="https://stackoverflow.com/questions/63613629/docker-via-snap-cannot-connect-to-the-docker-daemon-on-a-year-old-installation">這篇文章</a> 大致上是先透過</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">snap logs docker<br></code></pre></td></tr></table></figure><p>尋找錯誤訊息,然後就看到 docker.dockerd: Failed to start docker daemon: pid file found ensure docker is not running or delete /var/snap/docker/471/run/docker.pid, 後來把 pid 移除後,重新 sudo snap start docker 就可以正常運行了.</p><h2 id="另外一種錯誤"><a href="#另外一種錯誤" class="headerlink" title="另外一種錯誤"></a>另外一種錯誤</h2><p><code>2020-07-16T23:49:14Z docker.dockerd[932]: failed to start containerd: timeout waiting for containerd to start</code>。這個問題看起來是虛擬機關機操作不正確才導致常常出現這種錯誤，後來找到(這篇)<br>[<a href="https://stackoverflow.com/questions/62945254/docker-fails-with-failed-to-start-containerd-timeout-waiting-for-containerd-to]">https://stackoverflow.com/questions/62945254/docker-fails-with-failed-to-start-containerd-timeout-waiting-for-containerd-to]</a></p><p>只要把<code>/var/snap/docker/471/run/docker/containerd/containerd.pid</code> 移除後重新 <code>sudo snap stop docker &amp;&amp; sudo snap start docker</code> 即可排除問題。</p>]]></content>
    
    
    
    <tags>
      
      <tag>-Fail to start snap docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Install VSCode in ubuntu</title>
    <link href="/2020/12/23/installVscode/"/>
    <url>/2020/12/23/installVscode/</url>
    
    <content type="html"><![CDATA[<h2 id="how-to-install-VSCode-in-ubuntu"><a href="#how-to-install-VSCode-in-ubuntu" class="headerlink" title="how to install VSCode in ubuntu"></a>how to install VSCode in ubuntu</h2><p>(VSCode Official website)[<a href="https://code.visualstudio.com/docs/?dv=linux64_deb%5D">https://code.visualstudio.com/docs/?dv=linux64_deb]</a> </p><ol><li>Download VSCode deb package </li><li>Open it by ubuntu software store</li><li>finished!</li></ol><h3 id="Option-1"><a href="#Option-1" class="headerlink" title="Option.1"></a>Option.1</h3><ul><li>If it shows unsupported file then use another way, open a command line to install<br>type command below.<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">sudo</span> <span class="hljs-selector-tag">dpkg</span> <span class="hljs-selector-tag">-i</span> <span class="hljs-selector-tag">vscode</span><span class="hljs-selector-class">.deb</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Option-2"><a href="#Option-2" class="headerlink" title="Option.2"></a>Option.2</h3><p>move your downloaded file to home directory(~), because Ubuntu software is unable to reach it in /tmp directory. looks like a bug.</p>]]></content>
    
    
    
    <tags>
      
      <tag>-ubuntu dpkg ide</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>install laradock on ubuntu by snap</title>
    <link href="/2020/12/17/laradock/"/>
    <url>/2020/12/17/laradock/</url>
    
    <content type="html"><![CDATA[<h2 id="how-to-install-laradock"><a href="#how-to-install-laradock" class="headerlink" title="how to install laradock"></a>how to install laradock</h2><p>(Laradock Offical website)[<a href="https://laradock.io/]">https://laradock.io/]</a> </p><ol><li>snap install docker</li><li>git clone <a href="https://github.com/laradock/laradock.git">https://github.com/laradock/laradock.git</a></li><li>cd laradock &amp;&amp; cp env-example .env</li><li>vi .env<br>Find “APP_CODE_PATH_HOST” Set to laravel project location.</li><li>docker-compose up -d mysql redis phpmyadmin redis workspace</li><li>docker-compose exec mysql bash</li><li>mysql -uroot -proot </li><li>CREATE ‘user’@’localhost’ IDENTIFIED BY ‘PASSWORD’</li><li>CREATE DATABASE laravel;</li><li>Start Developing~~  e.g. php artisan key:generate &amp;&amp; php artisan migrate &amp;&amp; php artisan db:seed</li></ol><p>Now you can see laravel offical website pages by visiting <a href="http://localhost/">http://localhost:80/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>-docker laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手將 Hexo 架設到 GithubPages 上</title>
    <link href="/2020/11/04/hexo_githubpages/"/>
    <url>/2020/11/04/hexo_githubpages/</url>
    
    <content type="html"><![CDATA[<ol><li><p><a href="https://hexo.io/zh-tw/docs/">Hexo 官方文件</a><br>到 node 官網下載安裝檔，安裝 node.js 他會附帶 npm 工具。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>hexo 的命令列工具，安裝完畢可以使用 hexo --help<br>npm install -g hexo-cli  <span class="hljs-regexp">//</span>(CMD 需重開。)<br>hexo init &lt;folder&gt;<br>cd &lt;folder&gt;<br>npm install <span class="hljs-regexp">//</span>安裝 hexo 相關的 package<br></code></pre></td></tr></table></figure><p>執行完上方的指令就等同成功建置完部落格了，剩下的就是相關參數設定，像是網站的標題、網站的風格、文章等等。此時可以直接先使用 <code>hexo server</code> ; 即可看到部落格的畫面。也可以使用 <code>hexo new page about</code> 先行新增一個關於部落格的介紹頁面玩玩看。</p></li><li><p>佈署到 githubPages<br>在 github 上面，建立一個 Github Repo，Repo 名稱為 &lt;Github 用戶名&gt;.github.io ，由於我是採用 Travis CI 進行佈署，所以還需要 Github 授權 Travis CI 權限，主要分為下方兩個部分。</p><ol><li>前往 Travis 進行 github 帳號連結，且設定要授權給 travis 的 Repository。 (此部分只要登入 <a href="https://travis-ci.com/">Travis</a> 點一點就 OK 了)</li><li>前往 Github/Settings/Deverloper settings/Personal access tokens 設立一個給 Travis CI 的 token，後續在每次 git commit 到 github 時，travis 會藉由這個 token 來進行 build 的腳本。</li></ol><p>建置給 travis 的 Token 該權限請將 repo 開好開滿。<br><img src="/img/travis_ci_github_token.jpg" title="Github token generate"></p><p>接著到 Travis 網站貼上產生的 token，token name 可以參照後續的 .travis.yml<br><img src="/img/travis_setting_gh.jpg" title="Travis setting"></p><p>當 travis 要 build 你的專案時，你還需要告訴 travis 該怎麼做，因此需要在 github repo 新增 <code>.travis.yml</code> 檔案，藉由這個檔案告訴 travis 該如何建置環境及 compile，這樣當 push 檔案到 github 時，travis 就會依照你的 .travis.yml 步驟進行 pull 與 build，然後 travis 會自動將 build 好的檔案自動 push 到 gh-pages 的分支之中。</p><p>.travis.yml 內容參考如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">詳細參數可參考</span> <span class="hljs-string">travis</span> <span class="hljs-string">document</span><br><span class="hljs-attr">sudo:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">node_js</span><br><span class="hljs-attr">node_js:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">10</span> <span class="hljs-comment"># use nodejs v10 LTS</span><br><span class="hljs-attr">cache:</span> <span class="hljs-string">npm</span><br><span class="hljs-attr">branches:</span><br><span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span> <span class="hljs-comment"># build master branch only</span><br><span class="hljs-attr">script:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">git</span> <span class="hljs-string">submodule</span> <span class="hljs-string">init</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">git</span> <span class="hljs-string">submodule</span> <span class="hljs-string">update</span> <span class="hljs-string">--remote</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span> <span class="hljs-comment"># generate static files</span><br><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">provider:</span> <span class="hljs-string">pages</span><br><span class="hljs-attr">skip-cleanup:</span> <span class="hljs-string">trueg</span><br><span class="hljs-attr">github-token:</span> <span class="hljs-string">$GH_TOKEN</span><br><span class="hljs-attr">keep-history:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">on:</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br><span class="hljs-attr">local-dir:</span> <span class="hljs-string">public</span><br></code></pre></td></tr></table></figure><p><code>注意</code>此時 Github 網站的根目錄還停留在 master branch 所以會看不到任何頁面，需要至 github Repo 的 Setting 進行 Source 切換。</p><p><img src="/img/githubpage_change_branch.jpg"></p><p>這樣就可以輸入 https://&lt;github username&gt;.github.io 看到建置好的網站了。</p></li></ol><hr><p>其他: Hexo 切換不同的部落格主題(Theme)</p><p>本站有使用到 <a href="https://hexo.io/zh-cn/docs/">Hexo fluid theme</a> 這個主題，此時需要進行一些額外設定，其實主要參考官方網站慢慢看即可。剛好也有卡到 git submodule 的問題，後續再來寫一篇 git submodule…</p><p>另外 github pages 其實是有一些限制</p><ul><li>容量上限建議 1GB 內，不能超過 5GB (Strongly recommended)</li><li>月流量不能超過 100GB</li><li>一個小時只能 build 10 次</li></ul><p>要超過這些限制好像也挺難的…</p><blockquote><blockquote><p>參考資源連結</p></blockquote></blockquote><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo</a></li><li><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid</a></li><li><a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages">GithubPages</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github_pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript function context</title>
    <link href="/2020/10/08/javascript-context/"/>
    <url>/2020/10/08/javascript-context/</url>
    
    <content type="html"><![CDATA[<h2 id="Javascript-的-function"><a href="#Javascript-的-function" class="headerlink" title="Javascript 的 function"></a>Javascript 的 function</h2><p>今天在練習 js 的時候，一直卡在該用 this 還是 var。主要是 this 在 context 情境不同時，所指向的對象是不同的。然而這個情況在 普通 function 和箭頭函式的狀況下又有不一樣的變化。</p><ol><li>arrow function 內會綁定當前 this， normal function 不會。</li><li>可以利用 var 定義一個參數綁定當前的位置，進行呼叫。</li><li>var、this 所定義出來的變數是不同的。</li><li>this.variable 可以直接被外部存取、var variable 則需另外定義 getter 才行。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">var</span> intervalId;<br>  <span class="hljs-built_in">this</span>.intervalId = <span class="hljs-number">666</span>;<br><br>  <span class="hljs-built_in">this</span>.normalLogFun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// this 會因為 setInterval 而指向 window, self 則指向 timer</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>, self);<br><br>    <span class="hljs-built_in">clearInterval</span>(intervalId);<br>    self.isSame();<br>  &#125;;<br>  <span class="hljs-built_in">this</span>.arrowLogFun = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 在 arrow function 下，this 會先行綁定當前的 context.</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>, self);<br><br>    <span class="hljs-built_in">clearInterval</span>(intervalId);<br>    <span class="hljs-built_in">this</span>.isSame();<br>  &#125;;<br>  <span class="hljs-built_in">this</span>.start = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//把當前的 normal function 傳至 window.setInterval，所以 Context 會改變。</span><br>    intervalId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-built_in">this</span>.normalLogFun, <span class="hljs-number">1000</span>);<br>  &#125;;<br>  <span class="hljs-built_in">this</span>.start2 = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//把當前的 arrow function 傳至 window.setInterval，所以 Context 會改變。  (Arrow 不受 Context 改變影響)</span><br>    intervalId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-built_in">this</span>.arrowLogFun, <span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">this</span>.isSame();<br>  &#125;;<br>  <span class="hljs-built_in">this</span>.isSame = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// setInterval 回傳的 id</span><br>    <span class="hljs-built_in">console</span>.log(intervalId);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.intervalId); <span class="hljs-comment">// 666</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.intervalId); <span class="hljs-comment">// undefined</span><br>    <span class="hljs-comment">// 因為綁定的對象不同，所以是不同的東西</span><br>    <span class="hljs-built_in">console</span>.assert(intervalId == <span class="hljs-built_in">this</span>.intervalId, <span class="hljs-string">&quot;It&#x27;s different!!&quot;</span>);<br>  &#125;;<br>&#125;<br><span class="hljs-comment">//var t = new timer(); t.start(); t.start2()  可以使用這個測試</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>-javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
