<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LaraDock</title>
    <link href="/2020/12/17/laradock/"/>
    <url>/2020/12/17/laradock/</url>
    
    <content type="html"><![CDATA[<h2 id="how-to-install-laradock"><a href="#how-to-install-laradock" class="headerlink" title="how to install laradock"></a>how to install laradock</h2><p>(Laradock Offical website)[<a href="https://laradock.io/]">https://laradock.io/]</a> </p><ol><li>snap install docker</li><li>git clone <a href="https://github.com/laradock/laradock.git">https://github.com/laradock/laradock.git</a></li><li>cd laradock &amp;&amp; cp env-example .env</li><li>vi .env<br>Find “APP_CODE_PATH_HOST” Set to laravel project location.</li><li>docker-compose up -d mysql redis phpmyadmin redis workspace</li><li>docker-compose exec mysql bash</li><li>mysql -uroot -proot </li><li>CREATE ‘user’@’localhost’ IDENTIFIED BY ‘PASSWORD’</li><li>CREATE DATABASE laravel;</li><li>Start Developing~~  e.g. php artisan key:generate &amp;&amp; php artisan migrate &amp;&amp; php artisan db:seed</li></ol><p>Now you can see laravel offical website pages by visiting <a href="http://localhost/">http://localhost:80/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>-docker laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手將 Hexo 架設到 GithubPages 上</title>
    <link href="/2020/10/08/hexo_githubpages/"/>
    <url>/2020/10/08/hexo_githubpages/</url>
    
    <content type="html"><![CDATA[<ol><li><p><a href="https://hexo.io/zh-tw/docs/">Hexo 官方文件</a><br>到 node 官網下載安裝檔，安裝 node.js 他會附帶 npm 工具。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>hexo 的命令列工具，安裝完畢可以使用 hexo --help<br>npm install -g hexo-cli  <span class="hljs-regexp">//</span>(CMD 需重開。)<br>hexo init &lt;folder&gt;<br>cd &lt;folder&gt;<br>npm install <span class="hljs-regexp">//</span>安裝 hexo 相關的 package<br></code></pre></td></tr></table></figure><p>執行完上方的指令就等同成功建置完部落格了，剩下的就是相關參數設定，像是網站的標題、網站的風格、文章等等。此時可以直接先使用 <code>hexo server</code> ; 即可看到部落格的畫面。也可以使用 <code>hexo new page about</code> 先行新增一個關於部落格的介紹頁面玩玩看。</p></li><li><p>佈署到 githubPages<br>在 github 上面，建立一個 Github Repo，Repo 名稱為 &lt;Github 用戶名&gt;.github.io ，由於我是採用 Travis CI 進行佈署，所以還需要 Github 授權 Travis CI 權限，主要分為下方兩個部分。</p><ol><li>前往 Travis 進行 github 帳號連結，且設定要授權給 travis 的 Repository。 (此部分只要登入 <a href="https://travis-ci.com/">Travis</a> 點一點就 OK 了)</li><li>前往 Github/Settings/Deverloper settings/Personal access tokens 設立一個給 Travis CI 的 token，後續在每次 git commit 到 github 時，travis 會藉由這個 token 來進行 build 的腳本。</li></ol><p>建置給 travis 的 Token 該權限請將 repo 開好開滿。<br><img src="/img/travis_ci_github_token.jpg" title="Github token generate"></p><p>接著到 Travis 網站貼上產生的 token，token name 可以參照後續的 .travis.yml<br><img src="/img/travis_setting_gh.jpg" title="Travis setting"></p><p>當 travis 要 build 你的專案時，你還需要告訴 travis 該怎麼做，因此需要在 github repo 新增 <code>.travis.yml</code> 檔案，藉由這個檔案告訴 travis 該如何建置環境及 compile，這樣當 push 檔案到 github 時，travis 就會依照你的 .travis.yml 步驟進行 pull 與 build，然後 travis 會自動將 build 好的檔案自動 push 到 gh-pages 的分支之中。</p><p>.travis.yml 內容參考如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">詳細參數可參考</span> <span class="hljs-string">travis</span> <span class="hljs-string">document</span><br><span class="hljs-attr">sudo:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">node_js</span><br><span class="hljs-attr">node_js:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">10</span> <span class="hljs-comment"># use nodejs v10 LTS</span><br><span class="hljs-attr">cache:</span> <span class="hljs-string">npm</span><br><span class="hljs-attr">branches:</span><br><span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span> <span class="hljs-comment"># build master branch only</span><br><span class="hljs-attr">script:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">git</span> <span class="hljs-string">submodule</span> <span class="hljs-string">init</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">git</span> <span class="hljs-string">submodule</span> <span class="hljs-string">update</span> <span class="hljs-string">--remote</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span> <span class="hljs-comment"># generate static files</span><br><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">provider:</span> <span class="hljs-string">pages</span><br><span class="hljs-attr">skip-cleanup:</span> <span class="hljs-string">trueg</span><br><span class="hljs-attr">github-token:</span> <span class="hljs-string">$GH_TOKEN</span><br><span class="hljs-attr">keep-history:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">on:</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br><span class="hljs-attr">local-dir:</span> <span class="hljs-string">public</span><br></code></pre></td></tr></table></figure><p><code>注意</code>此時 Github 網站的根目錄還停留在 master branch 所以會看不到任何頁面，需要至 github Repo 的 Setting 進行 Source 切換。</p><p><img src="/img/githubpage_change_branch.jpg"></p><p>這樣就可以輸入 https://&lt;github username&gt;.github.io 看到建置好的網站了。</p></li></ol><hr><p>其他: Hexo 切換不同的部落格主題(Theme)</p><p>本站有使用到 <a href="https://hexo.io/zh-cn/docs/">Hexo fluid theme</a> 這個主題，此時需要進行一些額外設定，其實主要參考官方網站慢慢看即可。剛好也有卡到 git submodule 的問題，後續再來寫一篇 git submodule…</p><p>另外 github pages 其實是有一些限制</p><ul><li>容量上限建議 1GB 內，不能超過 5GB (Strongly recommended)</li><li>月流量不能超過 100GB</li><li>一個小時只能 build 10 次</li></ul><p>要超過這些限制好像也挺難的…</p><blockquote><blockquote><p>參考資源連結</p></blockquote></blockquote><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo</a></li><li><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid</a></li><li><a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages">GithubPages</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github_pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript function context</title>
    <link href="/2020/10/08/javascript-context/"/>
    <url>/2020/10/08/javascript-context/</url>
    
    <content type="html"><![CDATA[<h2 id="Javascript-的-function"><a href="#Javascript-的-function" class="headerlink" title="Javascript 的 function"></a>Javascript 的 function</h2><p>今天在練習 js 的時候，一直卡在該用 this 還是 var。主要是 this 在 context 情境不同時，所指向的對象是不同的。然而這個情況在 普通 function 和箭頭函式的狀況下又有不一樣的變化。</p><ol><li>arrow function 內會綁定當前 this， normal function 不會。</li><li>可以利用 var 定義一個參數綁定當前的位置，進行呼叫。</li><li>var、this 所定義出來的變數是不同的。</li><li>this.variable 可以直接被外部存取、var variable 則需另外定義 getter 才行。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">var</span> intervalId;<br>  <span class="hljs-built_in">this</span>.intervalId = <span class="hljs-number">666</span>;<br><br>  <span class="hljs-built_in">this</span>.normalLogFun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// this 會因為 setInterval 而指向 window, self 則指向 timer</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>, self);<br><br>    <span class="hljs-built_in">clearInterval</span>(intervalId);<br>    self.isSame();<br>  &#125;;<br>  <span class="hljs-built_in">this</span>.arrowLogFun = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 在 arrow function 下，this 會先行綁定當前的 context.</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>, self);<br><br>    <span class="hljs-built_in">clearInterval</span>(intervalId);<br>    <span class="hljs-built_in">this</span>.isSame();<br>  &#125;;<br>  <span class="hljs-built_in">this</span>.start = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//把當前的 normal function 傳至 window.setInterval，所以 Context 會改變。</span><br>    intervalId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-built_in">this</span>.normalLogFun, <span class="hljs-number">1000</span>);<br>  &#125;;<br>  <span class="hljs-built_in">this</span>.start2 = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//把當前的 arrow function 傳至 window.setInterval，所以 Context 會改變。  (Arrow 不受 Context 改變影響)</span><br>    intervalId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-built_in">this</span>.arrowLogFun, <span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">this</span>.isSame();<br>  &#125;;<br>  <span class="hljs-built_in">this</span>.isSame = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// setInterval 回傳的 id</span><br>    <span class="hljs-built_in">console</span>.log(intervalId);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.intervalId); <span class="hljs-comment">// 666</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.intervalId); <span class="hljs-comment">// undefined</span><br>    <span class="hljs-comment">// 因為綁定的對象不同，所以是不同的東西</span><br>    <span class="hljs-built_in">console</span>.assert(intervalId == <span class="hljs-built_in">this</span>.intervalId, <span class="hljs-string">&quot;It&#x27;s different!!&quot;</span>);<br>  &#125;;<br>&#125;<br><span class="hljs-comment">//var t = new timer(); t.start(); t.start2()  可以使用這個測試</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>-javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
